.libPaths("C:/Users/ljsinke/Documents/R/Library")
install.packages("bookdown")
library(bookdown)
install.packages("bookdown")
library(bookdown)
.libPaths("C:/Users/ljsinke/Documents/R/Library")
library(bookdown)
.libPaths("C:/Users/ljsinke/Documents/R/Library")
library(devtools)
load("C:/Users/ljsinke/Documents/2_r/cd/test_workflow/data/targets.RData")
targets$Basename <- substring(targets$supplementary_file,68,95)
RGset <- read.metharray.exp(base=NULL, targets, extended=TRUE)
library(minfi)
RGset <- read.metharray.exp(base=NULL, targets, extended=TRUE)
setwd("C:/Users/ljsinke/Documents/2_r/cd")
setwd("C:/Users/ljsinke/Documents/2_r/cd/IDATs")
RGset <- read.metharray.exp(base=NULL, targets, extended=TRUE)
save("RGset.RData")
save(RGset, "RGset.RData")
?save
save(RGset, file="RGset.RData")
?dist
?hclust
library(fastclust)
install.packages("fastclust")
library(fastcluster)
?par
View(RGset)
?dendrappy
?dendrapply
?plot
sBeta <- getBeta(RGset[,1:16], type="Illumina")
d <- dist(t(sBeta), method="euclidean")
fit <- hclust(d, method="average")
plot(fit, main="Cluster Dendogram", hang=-1, cex=0.6)
plot(fit, main="Cluster Dendogram",
hang=-1, cex=0.8)
plot(fit, main="Cluster Dendogram",
hang=-1, cex=0.8, horiz=T)
plot(fit, main="Cluster Dendogram",
hang=-1, cex=0.8, horiz=TRUE)
fitdd <- as.dendogram(fit)
fitdd <- as.dendrogram(fit)
plot(fit, main="Cluster Dendogram",
hang=-1, cex=0.8, horiz=TRUE)
plot(fit, main="Cluster Dendogram",
hang=-1, cex=0.8, horiz=TRUE)
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
plot(fit, main="Cluster Dendogram",
hang=-1, cex=0.8, horiz=TRUE, nodePar=nodePar)
plot(fit, main="Cluster Dendogram",
hang=-1, cex=0.8, horiz=TRUE, nodePar=nodePar)
plot(fit, main="Cluster Dendogram", hang=-1, cex=0.8, horiz=TRUE, nodePar=nodePar)
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19), cex = 0.7, col = "blue")
plot(fit, main="Cluster Dendogram", hang=-1, cex=0.8, horiz=TRUE, nodePar=nodePar)
plot(fitdd, main="Cluster Dendogram", hang=-1, cex=0.8, horiz=TRUE, nodePar=nodePar)
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19), cex = 0.7, col = "red")
plot(fitdd, main="Cluster Dendogram", hang=-1, cex=0.8, horiz=TRUE, nodePar=nodePar)
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19), cex = 0.7, col = "green")
plot(fitdd, main="Cluster Dendogram", hang=-1, cex=0.8, horiz=TRUE, nodePar=nodePar)
nodePar <- list(lab.cex=0.8, pch=c(NA, 19), cex=0.8, col=72)
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar)
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar, mar=c(2,2,2,2))
nodePar <- list(lab.cex=0.8, pch=c(NA, 19), cex=0.8, col="#73b1c9")
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar, mar=c(2,2,2,2))
nodePar <- list(lab.cex=0.8, pch=c(NA, 15), cex=0.8, col="#73b1c9")
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar, mar=c(2,2,2,2))
nodePar <- list(lab.cex=0.8, pch=c(NA, 15), cex=0.8, col="#5a8596")
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar, mar=c(2,2,2,2))
nodePar <- list(lab.cex=0.8, pch=c(NA, 15), cex=0.8, col="#41819a")
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar, mar=c(2,2,2,2))
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar, mar=c(2,2,2,2), xlab="Height")
plot(fitdd, main="Cluster Dendogram", hang=-1, horiz=TRUE, nodePar=nodePar, mar=c(10,10,10,10), xlab="Height")
pc <- screeplot(RGset)
library(DNAmArray)
pc <- screeplot(RGset)
GRset <- preprocessFunnorm.DNAmArray(RGset, nPCs=4, keepCN=FALSE)
# On my home desktop
setwd("C:/Users/Lu/Documents/Elmer Phudd/R/cd")
.libPaths("C:/Users/Lu/Documents/R/win-library/3.5")
# Attach packages needed in this section
library(GEOquery)
# Input the GEO SOFT format microarray data into R
GSE48472 <- getGEO(GEO="GSE48472")
# Extract phenotypic and meta data
targets <- pData(phenoData(GSE48472[[1]]))
save(targets, file="C:/Users/Lu/Documents/GitHub/test_workflow/data/targets.RData")
# Create basename column
targets$Basename <- substring(targets$supplementary_file, 68, 95)
head(targets[c(1,2, 33, 34)])
library(MethylAid)
sData <- summarize(targets)
# Unzip
setwd("./IDATs")
sData <- summarize(targets)
outliers <- visualize(sData)
# no outliers found
targets <- targets[!(rownames(targets) %in% rownames(outliers)), ]
# register(MulticoreParam(6))
# RGset <- read.metharray.exp.par(targets, verbose=TRUE, extended=TRUE)
RGset <- read.metharray.exp(base=NULL, targets, extended=TRUE)
library(minfi)
densityPlot(RGset)
beta <- getBeta(RGset, type="Illumina")
beta[is.na(beta)] <- median(beta, na.rm=TRUE)
library(irlba)
pc <- prcomp_irlba(t(beta), n=3)
summary(pc)
plot(pc$x, main = "Principal components plot")
df <- apply(targets, 2, function(x) as.numeric(factor(x)))
keep <- apply(df, 2, sd) > 0
summary(keep)
df <- df[ , keep]
colnames(df)
library(pheatmap)
cxy <- cor(pc$x, scale(df))
# cxy <- cxy[,colSums(is.na(cxy))<nrow(cxy)]
pheatmap(cxy, cluster_rows=FALSE, legend=TRUE, main="Heatmap of PC-covariate correlations")
library(fastcluster)
d <- dist(t(beta), method="euclidean")
fit <- hclust(d, method="average")
plot(fit)
pc <- prcomp_irlba(t(beta), n=4)
library(DNAmArray)
pc <- screeplot(RGset)
GRset <- preprocessFunnorm.DNAmArray(RGset, nPCs=4, keepCN=FALSE)
RGset <- probeFiltering(RGset)
locusNames <- getManifestInfo(RGset, "locusNames")
typeII <- getProbeInfo(RGset, type="II")
typeI <- getProbeInfo(RGset, type="I")
betas <- reduce(GRset, RGset, what="beta")
betas <- probeMasking(betas, array="450", genome="hg19")
predicted <- getSex.DNAmArray(betas)
predictedFactor <- as.character(factor(predicted))
table(predicted, predictedFactor)
predicted <- as.character(factor(getSex.DNAmArray(betas)))
table(predicted, predictedFactor)
?table
table(predicted, useNA="always")
predicted <- as.character(factor(getSex.DNAmArray(betas)), labels=c("Male", "Female", "Unknown"))
table(predicted, useNA="always")
predicted <- as.character(factor(getSex.DNAmArray(betas), labels=c("Male", "Female", "Unknown"))
predicted <- as.character(factor(getSex.DNAmArray(betas), labels=c("Male", "Female", "Unknown")))
predicted <- as.character(factor(getSex.DNAmArray(betas), labels=c("Male", "Female", "Unknown")))
predicted <- getSex.DNAmArray(betas)
predicted <- as.character(factor(predicted, labels=c("Male", "Female", "Unknown")))
predicted <- getSex.DNAmArray(betas)
predicted[is.na(predicted)] <- 2
predicted <- as.character(factor(predicted, labels=c("Male", "Female", "Unknown")))
table(predicted, useNA="always")
predicted[is.na(predicted)] <- 2
table(predicted, useNA="always")
predicted <- as.character(factor(getSex.DNAmArray(betas)))
table(predicted, useNA="always")
View(GSE48472)
predicted <- as.character(factor(getSex.DNAmArray(beta)))
table(predicted, useNA="always")
betas <- getSnpBeta(RGset)
betas <- reduce(GRset, RGset, what="beta")
betas <- probeMasking(betas, array="450", genome="hg19")
snpBetas <- getSnpBeta(RGset)
plot(betas, snpBetas)
dim(betas)
dim(snpBetas)
?beta2allele
BiocManager::install("wateRmelon", version = "3.8")
library(wateRmelon)
genki(snpBetas)
?genki
?genSnpBeta
library(minfi)
?getSnpBeta
?genki
genki(betas)
?getSnpBeta
getSnpBeta(betas)
# register(MulticoreParam(6))
# RGset <- read.metharray.exp.par(targets, verbose=TRUE, extended=TRUE)
RGsetOrig <- read.metharray.exp(base=NULL, targets, extended=TRUE)
snpBetasOrig <- getSnpBeta(RGsetOrig)
genki(snpBetaOrig)
genki(snpBetasOrig)
genki(snpBetas)
?relabelgenotypes
?alleleSharing
?knn.impute
install.packages("bnstruct")
library(bnstruct)
?knn.impute
install.packages("impute")
mvalues <- reduce(GRset, RGset, what="M")
mvalues <- probeMasking(mvalues, array="450", genome="hg19")
mvalues <- impute.knn(as.matrix(mvalues))$data
install.packages("impute")
BiocManager::install("impute", version = "3.8")
library(impute)
mvalues <- impute.knn(as.matrix(mvalues))$data
?cpgInfo
cpgs <- rownames(mvalues)
?loadDb
?cpginfo
?cpgInfo
cpgInfo <- cpgInfo(cpgs,TxDb.Hsapiens.UCSC.hg19.knownGene)
cpgs <- as.character(rownames(mvalues))
cpgInfo <- cpgInfo(cpgs,TxDb.Hsapiens.UCSC.hg19.knownGene)
cpgInfo <- cpgInfo(cpgs, TxDb="TxDb.Hsapiens.UCSC.hg19.knownGene")
cpgs <- rownames(mvalues)
cpgInfo <- cpgInfo(cpgs, TxDb="TxDb.Hsapiens.UCSC.hg19.knownGene")
?getPlatform
library(FDb.InfiniumMethylation.hg19)
rowRanges <- getPlatform(platform="HM450", genome="hg19")
rowRanges
rowRanges[1:5]
rowRanges[6:10]
rowRanges[1:5, ]
rowRanges[6:10, ]
?require
?features
feats <- features(FDb.InfiniumMethylation.hg19)
regions <- feats[seqnames(feats) %in% c("chr21", "chr22")]
?mcols
